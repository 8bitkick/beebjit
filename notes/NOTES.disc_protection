TODO:
- Fortress
- Cybertron Mission
- 3D pool

Great list of tricky and varied protection test cases:
https://stardot.org.uk/forums/viewtopic.php?f=4&t=10938&p=135262


- 005 Arcadians.FSD
SHA256: af86fa5016054f9192882d62d8a115ef22e82cfe8adb4d74f10cf828aad09b3e
Has various unreadable tracks.
First interesting read is track 4 sector 0, 1 sector.
$18 is returned because although the track is formatted, the track IDs are
either 0 or $18. There is also no match for logical track 4 on the next two
physical tracks.
Disc title has control characters in it that sets 6845 R0 to 0!!


- 011 Labyrinth.FSD
SHA256: 0798597b728f2a47013e6697623e58023a91edf8413b02b3ae9646ff23e396b7
This is highly typical of Acornsoft discs.
*. reveals the disc title has a "stop echo" control character in it.
Has various unformatted tracks.
Unformatted track 3 has sector IDs read with $1B (read sector IDs).
$18 is returned obviously.
Has many tracks consisting of:
a) Only deleted data sectors.
b) Mismatched logical and physical track IDs. Logical track register manually
rewritten to access them.
c) Large logical sector IDs.
Return code from $17 (read data and deleted data) is not checked for flag $20
(deleted data encountered).
Also has tracks with normal (non-deleted) sectors where the logical and physical
tracks don't match.


- 022 ELITE-SNG38-0.FSD
SHA256: d7922e5b70c6cadd2b2805d594f32d4545c744a1934a8e62c5bb38b8aa805393
Surprisingly simple protection for such a legendary title, but it was earlier
in the BBC era, 1984. Has:
a) An unformatted track 3, $1B (read sector IDs) is called on it an gets error
$18.
b) A few tracks, including 4 / 5 / 6, with large logical sector IDs and logical
track IDs not matching, so logical track register has to be manipulated to
read them.


- 050 FIRETRACK.FSD
SHA256: 4dedf6c5d37abf0e677b191acd8f13ce8c4117bf06413838ac1aa97c461078be
The readout shows a lot of unformatted / track mismatch / etc. but the main
check appears to center around track 2:
- 10 sectors, logical $80 - $89.
- All declaring 128 bytes and reading ok except $88.
- $88 delcares 256 bytes and gives $0E at 128 and 256 byte reads.
- Firetrack loader loads it as 256 byte sector, _does not care if the read
succeeds or fails_, and expects $00 at offset $8B.
[ITRP] 0736: LDA #$7F
[ITRP] 0738: LDX #$9A
[ITRP] 073A: LDY #$07
[ITRP] 073C: JSR $FFF1
[ITRP] 073F: LDA $198B
[ITRP] 0742: BNE $0736
079A: 00 00 19 FF FF 03 53 02 88 21 00 FF 00 19 FF FF  ......S..!......


- 058 BOULDER DASH.FSD
SHA256: a7514a655027bb39a4310976e69d7ac787a955ef341d259ac8a27c4d55b18d98
Interesting disc! Released a little later in the BBC's life.
1) !BOOT runs boot, which executes at $1100. Immediately launches in a VIA + EOR
bit of deobfuscation, using timing and its own program code as a key, with a
bit of self-modification of course. After a few seconds, branches to $1200.
2) At $1200, fiddles with ROMs, looks like it's looking for the infamous REPLAY
ROM! ($1203==REPLAY). Finishes with that at $125A. Writes the first intro
screen at $12C0. Finishes with that at $12CE.
3) At $12DB, does *DISK then *R.Welly
4) What?? If you *R.Welly directly, it loads. Unclear why bother with all the
deobfuscation in the first bit.
5) Ok, Welly executes at $1100 and has the same sort of unpacker. Execution
gets to $1200, REPLAY check. At $1294, does *DISK then *LOAD Welly2 A00. It
is EOR unpacked, at then at $12C4, we have a jump to $0AC1.
6) At $0AD6, JSR $0A38 uses OSWORD $7F to seek to 0. At $0B15, JSR $0A48 reads
track 1, sector 0, size 1024. Result must be $00. At $0B9B, JSR $0A2B reads
track $17, sector 2, size 512, into $1900. Then loop back to $0B6C, $0B9B to
JSR again, read track $10, sector 3, size 256 to $1B00. Back to $0B6C, but this
time branch to $0BA4.
7) At $0BDC, JSR $0A2B, here we go! Read track 0, sector 9, size 512, to $0400.
This is a sector overread, the sector is really 256 bytes, so the post-sector
bytes starting with the checksum and then GAP4 bytes end up at $0500.
8) At $0BDF, the data read to $1900 is unpacked using data at $0500 as a key.
Routine at $0C9B is called for every byte:
[ITRP] 0C9D: LDY #$00
[ITRP] 0C9F: LDX #$92
[ITRP] 0CA1: EOR $0502,X
[ITRP] 0CA4: EOR $0502,Y
[ITRP] 0CA7: INY
[ITRP] 0CA8: DEX
[ITRP] 0CA9: CPX #$64
[ITRP] 0CAB: BNE $0CA1
So it appears the amount of "overread" data required for correct unpacking is
$92 + $02 + 1 == 149 bytes, or 147 bytes excluding the sector checksum.
8) There's some check, correct execution branches to $0C26. RTS at $0C3E jumps
to $FF89, a further couple of RTS's land at $8B7D, in BASIC. Later, program
code hits at $1100... another unpacker... zzzzz...


- 072 CASTLE QUEST.FSD
SHA256: d5113bfb2ef4c58e06803d33406d1ed70f6f3b4505f1002e50334135cee3713f
Seems a very simple protection.
Physical track 2 has only sectors declaring logical track 4.
An attempt is made to read track 2, sector 0, which fails with $18 because of
the track mismatch.
You can actually just deformat track 2 entirely and the protection appears to
still pass.


- 080 REPTON.FSD
SHA256: f16492b1a08e2f06eb933a15baf5cbb5ed92c2fdb02ed142e64a4add115c54cc
Has some tracks with 18 data sectors and logical / physical track mismatch,
tracks 1 and 2.
Has one deleted sector on track 3, as well as other sectors.
Uses 8271 command $16 (read data and deleted data, 1x128 sector) to read track
3.


- 170 PHANTOM COMBAT (BBC 'B' 32K).FSD
SHA256: c94728018434000852dd16ac2c7144dc8792f237f5043782488dda066c0d7011
Various protections included deleted sectors and sector overread with CRC
error.
Also, fairly uniquely, uses 8271 command $3D, read special parameter, to
read parameter $17, the mode.


- 186 THE TEDDY BEARS' PICNIC SIDE 1.FSD
SHA256: 7bd415a4ade19250ba34888840a9dfdbe478a3d328a4e11d11bde6a39cdb80ea
Track 39 sector 9, 256 bytes, very special. It gives CRC error $0E when read,
and is expected to contain a few bytes of valid code followed by weak bits.
In the code sequence below, OSWORD &7F is expected to return $0E at &04A0, after
reading track 39 sector 9 into $1100.
Then $1100 is called to check the start of the sector is a few simple
deterministic bytes.
Then at $0539 there's a loop that repeats the same sector read into $1100
until a difference between different reads is detected in the range $1118 to
$111F.
[ITRP] 0536: JSR $0492
...
[ITRP] 0492: LDA #$7F
[ITRP] 0494: LDX $0490
[ITRP] 0497: LDY $0491
[ITRP] 049A: JSR $FFF1
[ITRP] 049D: LDA #$0E
[ITRP] 049F: NOP
[ITRP] 04A0: CMP #$0E
[ITRP] 04A2: BNE $049D
[ITRP] 04A4: LDA #$3D
[ITRP] 04A6: JSR $1100
...
[ITRP] 1100: STA $0737
[ITRP] 1103: RTS
...
[ITRP] 04A9: LDA #$32
[ITRP] 04AB: STA $03A1
[ITRP] 04AE: RTS
...
[ITRP] 0539: LDA $1118
[ITRP] 053C: STA $81
[ITRP] 053E: LDA $1119
[ITRP] 0541: STA $82
[ITRP] 0543: LDA $111A
[ITRP] 0546: STA $83
[ITRP] 0548: LDA $111B
[ITRP] 054B: STA $84
[ITRP] 054D: LDA $111C
[ITRP] 0550: STA $85
[ITRP] 0552: LDA $111D
[ITRP] 0555: STA $86
[ITRP] 0557: LDA $111E
[ITRP] 055A: STA $87
[ITRP] 055C: LDA $111F
[ITRP] 055F: STA $88
[ITRP] 0561: JSR $0492
[ITRP] 0564: LDX #$00
[ITRP] 0566: LDA $81,X
[ITRP] 0568: CMP $1118,X
[ITRP] 056B: BNE $0577
[ITRP] 056D: INX
[ITRP] 056E: CPX #$07
[ITRP] 0570: BNE $0566
[ITRP] 0572: JMP $0536
[ITRP] 0575: BEQ $0536


- 200 MOON CRESTA (NO LENSLOCK).FSD
Nothing too exciting. Protection is mainly deleted data based.
But it is the first title discovered to use 8271 command $1F aka. verify.


- 275 The Wizard's Return DISC 1.FSD
Sector 0, track 1 is deleted, 256 bytes. The program reads it normally with $1F
(verify), as a 256 byte sector.
Later it does a read (with deleted), command $17, as a 512 byte sector,
apparently expecting error code $2E. Where the first two bytes are the CRC,
the overread data is:
3C 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 FF FF FF FF FF FF FF ....
The post-CRC bytes would normally be GAP 3 and gaps start with $FF, so looks
like some hidden inter-sector byte expectations of 0x00.


- 297 DISC DUPLICATOR 3.FSD
SHA256: c73125f2c50ded2b4bd3c06d804273fe502dd35f10339afb991d93cfb04a1b41
1) !BOOT executes at $2000. At $2049, calls $20D7 which EOR unpacks some code
from $2427 to $400.
2) At $204C, JSR $0615 calls into the unpacked code, which changes mode and
eventually jumps to $2054 and branches to $208C. $20D7 is called a couple of
times which EOR unpacks some code from $2112 to $0900 and $23F2 to $0D00.
3) At $20AF, $0900 is called which seeks to track 0.
4) At $20C3, $0917 is called which seems to be a first protection check. It
reads track 2 sector 1, count 1, size 2048. At $20C6, error code $0E is
expected but also byte 4 of the read must be $0E. $20D1 jumps into the read
data, at $2505.
5) At $252D, $20D7 is called to EOR unpack $2977 to $0D00.
6) At $2530, $0900 is called to seek to 0 again. At $2533, JSR $0615 again,
which this time prints the DISC DUPLICATOR 3 banner and jumps to $25B4.
7) At $25B4, $0B6E is called for some initialization. $2808 is called to
checksum parts of !BOOT that were read previously. $27F7 is called, also
checksumming. $27B9 is called, perhaps looking for sideways RAM.
8) At $25C0, $2758 is called. This calls $0942 to read 31 IDs from track
24 into $0E00, with $0E02 of the result ($00) stored in $C4.
9) At $276F, $0900 is called to seek to 0.
10) At $2772, some protection! A series of reads are performed on track 14,
sector 1, of varying sector sizes. 2048 byte and 1024 byte reads must error.
256 byte read must not error. 512 byte read must give $0E error but also
byte index $180 of the read must match the result from above stored in $C4.


- 358 THE LIVING DAYLIGHTS.FSD
SHA256: c7530cdc837ff0a6ae45ac6a827e91dd352c5fb3e04a5965463b25310860265e
1) Track 2 is interesting. It is 18 sector but looks like 10 sectors of 256
bytes. The logical sector IDs for the first 10 sectors run 09 -> 00 inclusive.
Then, there are 8 sectors with sector headers of 4x 00 bytes.
2) LOADER executes at $1200. It does an EOR based unpack of itself at $1239,
and when execution arrives at $1239, it is JSR $1338.
3) At $1260, a JSR $1340 routine uses OSWORD $7F to seek to 0.
4) At $1263, OSWORD $7F is used to read 10 sector IDs (command $1F) from track
2, with the results going to $2000. A result of 2 is expected for the first
byte, presumably a 40/80 track check?
NOTE: this leaves the head position about half-way through the track.
5) At $12A4, a JSR $1340 routine uses OSWORD $7F to seek to 0.
6) At $12A7, a JSR $134A routine uses OSWORD $7F to seek to 2.
7) At $12AD, OSWORD $7F is used to read track 2, sector 0, 1 sector, 256 byte
sized.
I believe a couple of attempts are allowed but this is sensitive to current
head position and therefore seek timing sensitive! It will only work if the
read starts in the first half of the track, otherwise it'll hit the sector
headers with logical track $00 and bail.
The timing seems to work: the seek to 0 and then back to 2, with default seek
and settle timings, leaves the head position a little over 20% into the track.
8) Read result is $0E (unchecked?) but the 10 sector read bytes, starting from
offset $80 (i.e. the start of the overread) are expected to be:
(6502db) m 13dc
13DC: 5D 30 FF FF FF FF FF FF FF FF FF 00 00 00 00 00


- 499 FUN PHONICS 8.fsd
SHA256: 64401773e6a4afa1dfbb9eb97854822e2b27d2d1b6da525c32cd487ac659760d
- Fun_Phonics_8_FSD0499_1.hfe
SHA256: a9bbc0aec7ea53a09a1d2facceb901e615fbbc0b0a61a68e5e6a31588a993c33
1) Protected track is track 6, consisting of 8 sector headers: 7x
$00/$00/$00/$00 and 1x $00/$00/$25/$00.
2) !BOOT executes at $0935. At $0948, it calls $09EF which uses OSWORD $7F to
read 2 sectors from track 39 into $7000.
3) After some unpacking, code at $0971 calls $09D6 which uses OSWORD $7F to
read a single sector header from track 0.
4) At $0979, $09EF is called again, this time to read a couple of sectors from
track 6. This fails with $18 (sector not found) and the code checks that the
read did not succeed ay $097C.
5) At $0987, OSWORD $7F is called to "read special register" $12, which is
the track register for drive 0!
[ITRP] 098A: LDA $09D5
[ITRP] 098D: CMP #$08
[ITRP] 098F: JMP $09C2
It looks like the author was considering checking the Intel 8271 quirk of the
drive stepping a couple of tracks forward to extend the search when a sector
cannot be found. In the end, though, the results of the CMP are never checked
(and indeed at this time of writing, beebjit does not implement this 8271
quirk).


Copies with DD3 standard mode:
- 001 EXILE.FSD
- 005 Arcadians.FSD
- 040 Starship Command.FSD
- 194 Mr Ee.FSD
