1) Simple 6502 register zeroing optimization.
6502:
  LDA #$00
  RTS
Unoptimized:
  mov al, 0
  test al, al
  <rts code>
Optimized:
  xor al, al
  <rts code>

2) NZ flag setting elimination.
6502:
  LDA #$01
  LDX #$02
  LDY #$03
  ORA #$EE
Unoptimized:
  mov al, 1
  test al, al
  mov bl, 2
  test bl, bl
  mov cl, 3
  test cl, cl
  or al, 0xee
Optimized:
  mov al, 1
  mov bl, 2
  mov cl, 3
  or al, 0xee

3) Immediate store optimization.
6502:
  LDA #$01
  STA $70
Unoptimized: (optimization 2) included)
  mov al, 1
  mov 0x10000070, al
Optimized:
  mov al, 1
  mov BYTE PTR 0x10000070, 1

4) Register write elimination.
6502:
  LDA #$01
  STA $70
  LDA #$02
Unoptimized: (optimization 2) and 3) included)
  mov al, 1
  mov BYTE PTR 0x10000070, 1
Optimized:
  mov BYTE PTR 0x10000070, 1

5) Known-Y optimization for idy mode addressing
6502:
  LDY #$AA
  LDA ($40),Y
  LDY #$02
Unoptimized:
  mov cl, 0xaa
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + rcx + 0x02000000]
  mov cl, 2
Optimized (optimization 4) included)
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + 0x120000AA]
  mov cl, 2

6) Known-Y propagation across INY, etc.
6502:
  LDY #$01
  LDA ($40),Y
  STA $30
  INY
  LDA ($40),Y
  STA $32
  INY
Unoptimized:
  mov cl, 1
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + rcx + 0x02000000]
  mov [0x21000030], al
  inc cl
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + rcx + 0x02000000]
  mov [0x21000032], al
  inc cl
Optimized (optimization 4) and 5) included)
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + 0x12000001]
  mov [0x21000030], al
  movzx edx, BYTE PTR [0x10000040]
  mov al, [rdx + 0x12000002]
  mov [0x21000032], al
  mov cl, 3

7) Indirect load elimination
6502:
  EOR ($70),Y
  STA ($70),Y
Unoptimized:
  movzx edx, BYTE PTR [0x10000070]
  xor al, [rdx + rcx + 0x02000000]
  movzx edx, BYTE PTR [0x10000070]
  mov [rdx + rcx + 0x03000000], al
Optimized:
  movzx edx, BYTE PTR [0x10000070]
  xor al, [rdx + rcx + 0x02000000]
  mov [rdx + rcx + 0x03000000], al

8) Carry and overflow flag setting elimination
6502:
  ADC #$10
  ADC #$20
  <some jump>
Unoptimized:
  bt r14, 0
  adc al, 0x10
  setb r14b
  seto r12b
  bt r14, 0
  adc al, 0x20
  setb r14b
  seto r12b
Optimized:
  bt r14, 0
  adc al, 0x10
  adc al, 0x20
  setb r14b
  seto r12b

9) CLC + ADC optimizations
6502:
  CLC
  ADC #$44
Unoptimized:
  mov r14b, 0
  bt r14, 0
  adc al, 0x44
Optimized:
  add al, 0x44
