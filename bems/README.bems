Files from Stairway To Hell archive unless otherwise noted.

- Hopper (used to have it working, it broke)
- Ghouls (used to have it working, it broke)


- arcad.bem, a180c48b3ab3a0669c8cca0b0029350e
Use: ./6502jit -load bems/arcad.bem -opt jit:self-mod-all
Based on: 5921034898f6710bde6d22ac5532c8d9  Arcadians.zip
Commands to run game:
*LOAD ARCAD1
*TAPE
?&2AF=0
CALL &3F00
Initial 6502 PC: $3F00
IRQ1V @ $0204: $4A9A
EVNTV @ $0220: $FFA6 (default)
Notes:
1) $3F00 jumps to $60D0 which is relocation loops. $60EE writes over old code,
including $3F00, with new code, using the STA ($70),Y opcode. So -opt
jit:self-mod-all is needed. Eventually, $60FB does JMP $49DA. I think a BEM
file starting at $49DA wouldn't need the jit option.
2) Has a poll wait loop at $4AA7 that needs $0418 and $041B to become different.
This condition occurs when the interrupt handler at $4A9A detects a vsync
interrupt and it does INC $0418 at $4AA1.
3) Has a super interesting condition (bug?) when rendering the blown up ship
animation. Rendering seems to kick off at $5119 by calling $3EC8 a couple of
times to get randomness and storing it as a pointer at $77. Later, at $5144,
this random address is read via AND ($05,X). Depending on the randomness, this
read can and will read arbitrary hardware regsiters and that can and will have
side effects!


- cit.bem, c324650a75e61634c59a789af3330bde
Use: ./6502jit -load bems/cit.bem -opt jit:no-rom-fault
Based on: 1e91b92780aac00ad3afff07af58c761  Citadel.zip
Initial 6502 PC: $55E8
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $2500
Notes:
1) Opcode 0x04, NOP zp undocumented instruction used in loader at $549D.
2) Opcode 0x9C, SHY abx undocumented instruction at $55CB.
3) Breaking at $55E8 is where the main game has finished loading from disk.
4) Need to load the loader first to select key layout for main game to work.
5) Loops at $4110 waiting for 4 vsync ticks, read from $0120. Event handler at
$2500 simply does INC $0120; RTS.


- exile_post_sed.bem, 03a4afdb0c75b987d1721176ed17f9cc
Use: ./6502jit -load bems/exile_post_sed.bem
Based on: cf9c81aa292f2a4c47175b02f301b3f5  Exile.zip
Alt1 note: Patches out vsync wait for turbo speed.
Alt1: echo -e 'sm 1f65 ea\nsm 1f66 ea\nstopat 0\nc\n' | ./6502jit -load bems/exile_post_sed.bem -stopat 6075
Initial 6502 PC: $6075
IRQ1V @ $0204: $12A6
Notes:
1) Uses SED, at $6045, as part of checksumming the saved game file?
2) Lots of self-modifying code.
3) Seems to use zero-page wraparound for zero page X addressing mode at $223D
with ADC $B6,X. And some further instances below.


- galaforce.bem, d17b8e77b6a8ca311b099ad0bc65a275
Use: ./6502jit -load bems/galaforce.bem -opt jit:no-rom-fault
Based on: 2fd6a8499fe3f6120daf7e52d7be7c60  Galaforce.zip
Commands to run game:
*LOAD GALA3
*TAPE
?&2AF=0
CALL &4000
Initial 6502 PC: $4000
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $0D8F
Notes:
1) Loader code, starting at $4000, is self-modifying. INC $402F, at $4036,
changes the low byte of the operand for LDA $1A00,X, for example.
After relocation, execution continues via JMP $0BEF.
2) Routine starting at $1280 performs LDA $FE44, which is sysvia timer1 counter
low byte. Looks like it's seeding and running an RNG?
3) Game code at $1B04 self-modifies the operand of the LDA #$00 at $1B1E.
4) Game code at $0B5A, first time through, starts writing at high addresses,
the first being $C039?? That's ROM, not writeable.
5) Sprite plot routine is at $0B00 and starts with a bunch of self-modifying
writes.


- lab.bem
Based on: f00b3c18c653ac639366579a59b81f41  Labyrinth.ssd
Commands to run game:
*LOAD LABRNTH
CALL &5D00
Initial 6502 PC: $5D00
IRQ1V @ $0204: $DC93 (default)


- meteor.bem
(todo)
Notes:
1) Loads T1CH, LDA $FE65 at $1601, which is not super common.
2) Seems to be using the user VIA timers, although the game seems to work well
with the user VIA timer not wired up?


- mree.bem, c25c41bb59855f25f293fb41d89c8c69
Use: ./6502jit -load bems/mree.bem
Based on: 4f1e5098d4fa8701d95f08b773245841  MrEe.zip
Commands to run game:
*LOAD MRE2
*TAPE
?&2AF=0
CALL &4300
Notes:
1) Immediately, $4302 writes to ROM?! via STA $801B.
2) Uses SED, ugh, first instance $0DB5. Unclear why.
3) Waits for uservia timer to fire at $0987.


- pom.bem, 7517be27b7a3d8d03babc4feec43ff31
Use: ./6502jit -load bems/pom.bem -opt jit:no-self-mod-abs
Based on: 24658bcd6bf33387637fc56467b1b821  PalaceOfMagic.zip
Commands to run game:
*LOAD POM2
*TAPE
?&2AF=0
CALL &63A0
Initial 6502 PC: $63A0
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $FFA6 (default)
Notes:
1) Seems to work flawlessly(?) first time, although this is one of the later
games tried.
2) Must use vsync: runs at normal speed.
3) Does not appear to use self-modifying code.
4) Appears to have a non-self-modifying but unrolled sprite plot loop at $0700.


- starship.bem, a30b2a6bc8153c71a006a6d843dabed6
Use: ./6502jit -load bems/starship.bem -opt jit:no-self-mod-abs
Based on: eb29752d2aaa1912772665a72822a616  StarshipCommand.zip
Commands to run game:
*LOAD COMMAND
?&2AF=0
CALL &62B1
Initial 6502 PC: $62B1
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $FFA6 (default)


- tarzan.bem, eb47d62dd4014aeb5a0a22d2850f013d
Based on: 375166a3ff683347fd5b8a224741fc64  Tarzan-Alligata.zip
Commands to run game:
*LOAD TARZAN2
CALL &4332
Commands to run emulator:
(Patches out vsync test and DFS ROM presence.)
echo -e 'sm 2af 00\nsm 24dc ea\nsm 24dd ea\nstopat 0\nc\n' | ./6502jit -load bems/tarzan.bem -opt jit:no-self-mod-abs -stopat 2e11
Initial 6502 PC: $4332
IRQ1V @ $0204: $DC93 (default)
Notes:
1) Initial relocation routine jumps to $2E11 at $438E.
2) There's test for vsync: BIT $FE4D at $24D9. The followed BEQ at $24DC can be
nop'd out with two bytes of EA, to get a version speed limited only by
emulator speed.


- tkv.bem, 2de927001a7aec1c3ce03cd37bc87128
Based on: 220ad878e83106e522a1c0bb1e83df97  TwinKingdomValley.ssd
Commands to run game:
*LOAD TKV
CALL &7B00
Initial 6502 PC: $7B00
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $FFA6 (default)


- Hopper
Based on:
d2e7a0712d13b5c26d8cd0360551bfdf  Hopper.zip
IRQ1V @ $0204: $DC93 (default)
Notes:
- Uses SED.
- Self-modifies a drawing route at $1F8E using aby addressing mode:
  STA $2004,Y. Routine starts at $1F7A. 8 bytes of code are written.
- Self-modified instructions are different opcodes, e.g. starts with
  LDA ($72),Y vs. LDA #$30.


- Snapper
Based on:
7d801d30c56c27b61faaf9b6b7c3fa45  Snapper-v1.zip
IRQ1V @ $0204: $DC93 (default)
Notes:
- Interesting wait loop at $10D3, which is simply polling $FE60 waiting for it
to change. This value automagically changes in the hardware as the user VIA
timer 1 rolls over, if the ACR register has bit 0x80 set. This is separate from
the timer interrupt and indeed the IER for the user VIA is 0x00.
