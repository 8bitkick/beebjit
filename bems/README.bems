Files from Stairway To Hell archive unless otherwise noted.

- tarzan.bem
Based on:
375166a3ff683347fd5b8a224741fc64  Tarzan-Alligata.zip
Commands to run game:
*LOAD TARZAN2
CALL &4332
Commands to run emulator:
(Patches out vsync test and DFS ROM presence.)
echo -e 'sm 2af 00\nsm 24dc ea\nsm 24dd ea\nstopat 0\nc\n' | ./6502jit -load bems/tarzan.bem -opt jit:no-self-mod-abs -stopat 2e11
Initial 6502 PC: $4332
IRQ1V @ $0204: $DC93 (default)
Notes:
1) Initial relocation routine jumps to $2E11 at $438E.
2) There's test for vsync: BIT $FE4D at $24D9. The followed BEQ at $24DC can be
nop'd out with two bytes of EA, to get a version speed limited only by
emulator speed.

- galaforce.bem
Based on:
2fd6a8499fe3f6120daf7e52d7be7c60  Galaforce.zip
Commands to run game:
*LOAD GALA3
CALL &4000
Initial 6502 PC: $4000
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $0D8F
Notes:
1) Loader code, starting at $4000, is self-modifying. INC $402F, at $4036,
changes the low byte of the operand for LDA $1A00,X, for example.
2) Routine starting at $1280 performs LDA $FE44, which is sysvia timer1 counter
low byte. Looks like it's seeding and running an RNG?
3) Game code at $1B04 self-modifies the operand of the LDA #$00 at $1B1E.
4) Game code at $0B5A, first time through, starts writing at high addresses,
the first being $C039?? That's ROM, not writeable.
5) Sprite plot routine is at $0B00 and starts with a bunch of self-modifying
writes.

- mree.bem
Based on:
4f1e5098d4fa8701d95f08b773245841  MrEe.zip
Commands to run game:
*LOAD MRE2
CALL &4300
Notes:
1) Immediately, $4302 writes to ROM?! via STA $801B.
2) Uses SED, ugh, first instance $0DB5. Unclear why.
3) Waits for uservia timer to fire at $0987.

- cit.bem
Based on:
1e91b92780aac00ad3afff07af58c761  Citadel.zip
Initial 6502 PC: $55E8
IRQ1V @ $0204: $DC93 (default)
EVNTV @ $0220: $2500
Notes:
1) Opcode 0x04, NOP zp undocumented instruction used in loader at $549D.
2) Opcode 0x9C, SHY abx undocumented instruction at $55CB.
3) Breaking at $55E8 is where the main game has finished loading from disk.
4) Need to load the loader first to select key layout for main game to work.
5) Loops at $4110 waiting for 4 vsync ticks, read from $0120. Event handler at
$2500 simply does INC $0120; RTS.

- Hopper
Based on:
d2e7a0712d13b5c26d8cd0360551bfdf  Hopper.zip
IRQ1V @ $0204: $DC93 (default)
Notes:
- Uses SED.
- Self-modifies a drawing route at $1F8E using aby addressing mode:
  STA $2004,Y. Routine starts at $1F7A. 8 bytes of code are written.
- Self-modified instructions are different opcodes, e.g. starts with
  LDA ($72),Y vs. LDA #$30.

- Exile
Based on:
cf9c81aa292f2a4c47175b02f301b3f5  Exile.zip
Commands to run emulator:
(Patches out vsync requirement and some palette modification wait loop.)
echo -e 'sm 1f65 ea\nsm 1f66 ea\nsm 12aa 4c\nsm 12ab e9\nsm 12ac 12\nstopat 0\nc\n' | ./6502jit -load bems/exile_post_sed.bem -stopat 6075
IRQ1V @ $0204: $12A6
Notes:
- Uses SED, at $6045, as part of checksumming the saved game file?
- Lots of self-modifying code.
- Seems to use zero-page wraparound for zero page X addressing mode at $223D
with ADC $B6,X. And some further instances below.

- Snapper
Based on:
7d801d30c56c27b61faaf9b6b7c3fa45  Snapper-v1.zip
IRQ1V @ $0204: $DC93 (default)
Notes:
- Interesting wait loop at $10D3, which is simply polling $FE60 waiting for it
to change. This value automagically changes in the hardware as the user VIA
timer 1 rolls over, if the ACR register has bit 0x80 set. This is separate from
the timer interrupt and indeed the IER for the user VIA is 0x00.

- Arcadians
Based on:
ef37488dcac07cf19c60e4838ae37c2cf00cc09953cd515a32850f09b5adc4b8  Arcadians.zip
IRQ1V @ $0204: $4A9A
EVNTV @ $0220: $FFA6 (default)
Notes:
- Has a poll wait loop at $4AA7 that needs $0418 and $041B to become different.
This condition occurs when the interrupt handler at $4A9A detects a vsync
interrupt and it does INC $0418 at $4AA1.
- Has a super interesting condition (bug?) when rendering the blown up ship
animation. Rendering seems to kick off at $5119 by calling $3EC8 a couple of
times to get randomness and storing it as a pointer at $77. Later, at $5144,
this random address is read via AND ($05,X). Depending on the randomness, this
read can and will read arbitrary hardware regsiters and that can and will have
side effects!
